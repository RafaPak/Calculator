using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ApCalculadora
{
    public partial class frmCalculadora : Form
    {
        public frmCalculadora()
        {
            InitializeComponent();
        }

        private bool IsOperacao(string aux)
        {
            if (aux == "+" || aux == "-" || aux == "/" || aux == "*" || aux == "^" || aux == "(" || aux == ")")
                return true;

            return false;
        }

        private bool TemPrecedencia(char topo, char operacao)
        {
            switch (topo)
            {
                case '+':
                case '-':
                    if (operacao == '+' || operacao == '-' || operacao == ')')
                        return true;
                    break;

                case '*':
                case '/':
                case '^':
                    if (operacao == '+' || operacao == '-' || operacao == '*' || operacao == '/' || operacao == ')')
                        return true;
                    break;

                case '(':
                    if (operacao == ')')
                        return true;
                    break;

            }

            return false;
        }

        private void btnApagar_Click(object sender, EventArgs e)
        {
            txtVisor.Text = "";
            txtResultado.Text = "";
            lbSequencias.Text = "Pósfixa";
        }

        private void btn0_Click(object sender, EventArgs e)
        {
            lbSequencias.Text = "Pósfixa";
            Button clicked = (Button)sender;
            txtVisor.Text += clicked.Text;
        }

        private void btnResultado_Click(object sender, EventArgs e)
        {
            FilaLista<string> sequenciaInfixa = new FilaLista<string>();
            FilaLista<string> sequenciaPosfixa = new FilaLista<string>();
            PilhaLista<string> operacoes = new PilhaLista<string>();

            string sequencia = txtVisor.Text;

            for (int x = 0; x < sequencia.Length; x++)
            {
                string item = "";

                if (IsOperacao(sequencia[x].ToString()))
                {
                    item = "";
                    int posicao = x;

                    while (posicao + item.Length < sequencia.Length && (!IsOperacao(sequencia[posicao + item.Length].ToString()) || sequencia[posicao + item.Length] == '.'))
                        item += sequencia[posicao + item.Length];

                    x = posicao + item.Length - 1;
                    sequenciaPosfixa.Enfileirar(item);
                }
                else
                {
                    item = sequencia[x] + "";

                    while (!operacoes.EstaVazia() && TemPrecedencia(operacoes.OTopo()[0], item[0]))
                    {
                        char operador = operacoes.OTopo()[0];

                        if (operador == '(')
                            break;
                        else
                        {
                            sequenciaPosfixa.Enfileirar(operador + "");
                            operacoes.Desempilhar();
                        }
                    }

                    if (item != ")")
                        operacoes.Empilhar(item);
                    else
                        operacoes.Desempilhar();
                }

                if (item != "(" && item != ")")
                    sequenciaInfixa.Enfileirar(item);
            }

            while (!operacoes.EstaVazia())
            {
                string operador = operacoes.Desempilhar();

                if (operador != ")" && operador != "(")
                    sequenciaPosfixa.Enfileirar(operador);
            }

            char variavel = 'A';
            string[] vetorPosfixa = sequenciaPosfixa.ToArray();
            lbSequencias.Text = "Pósfixa: ";

            for (int y = 0; y < vetorPosfixa.Length; y++)
            {
                if (IsOperacao(vetorPosfixa[y]))
                    lbSequencias.Text += vetorPosfixa[y];
                else
                    lbSequencias.Text += variavel++;
            }
        }

        private void txtVisor_KeyPress(object sender, KeyPressEventArgs e)
        {
            if ((e.KeyChar != '0') && (e.KeyChar != '1') && (e.KeyChar != '2') && (e.KeyChar != '3') && (e.KeyChar != '4') && (e.KeyChar != '5') &&
                (e.KeyChar != '6') && (e.KeyChar != '7') && (e.KeyChar != '8') && (e.KeyChar != '9') && (e.KeyChar != '^') && (e.KeyChar != '/') &&
                (e.KeyChar != '*') && (e.KeyChar != '-') && (e.KeyChar != '+') && (e.KeyChar != '.') && (e.KeyChar != '(') && (e.KeyChar != ')') &&
                !char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar))
            {
                e.Handled = true;
            }
        }
    }
}
